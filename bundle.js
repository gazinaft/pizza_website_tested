(()=>{var t,e,r={666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var o=e&&e.prototype instanceof m?e:m,a=Object.create(o.prototype),i=new k(n||[]);return a._invoke=function(t,e,r){var n=h;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===g){if("throw"===o)throw a;return I()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var s=N(i,r);if(s){if(s===f)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=g,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=u(t,e,r);if("normal"===c.type){if(n=r.done?g:d,c.arg===f)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=g,r.method="throw",r.arg=c.arg)}}}(t,r,i),a}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var h="suspendedStart",d="suspendedYield",p="executing",g="completed",f={};function m(){}function y(){}function v(){}var b={};b[a]=function(){return this};var w=Object.getPrototypeOf,_=w&&w(w(O([])));_&&_!==r&&n.call(_,a)&&(b=_);var E=v.prototype=m.prototype=Object.create(b);function L(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function j(t,e){function r(o,a,i,s){var c=u(t[o],t,a);if("throw"!==c.type){var l=c.arg,h=l.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,i,s)}),(function(t){r("throw",t,i,s)})):e.resolve(h).then((function(t){l.value=t,i(l)}),(function(t){return r("throw",t,i,s)}))}s(c.arg)}var o;this._invoke=function(t,n){function a(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(a,a):a()}}function N(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,N(t,r),"throw"===r.method))return f;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var o=u(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,f;var a=o.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,f):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,f)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function O(t){if(t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:I}}function I(){return{value:e,done:!0}}return y.prototype=E.constructor=v,v.constructor=y,y.displayName=c(v,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c(t,s,"GeneratorFunction")),t.prototype=Object.create(E),t},t.awrap=function(t){return{__await:t}},L(j.prototype),j.prototype[i]=function(){return this},t.AsyncIterator=j,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new j(l(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},L(E),c(E,s,"Generator"),E[a]=function(){return this},E.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=O,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(x),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return s.type="throw",s.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),l=n.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),x(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;x(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:O(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),f}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},277:(t,e,r)=>{var n={"./__tests__/action/page.test.js":[369,369],"./__tests__/catalog.test.js":[716,716],"./__tests__/catalog/page.test.js":[368,368],"./__tests__/mainPage.test.js":[480,480],"./__tests__/order.test.js":[806,806],"./__tests__/orderDone.test.js":[624,624],"./__tests__/product/page.test.js":[329,329],"./action/page.js":[722,722],"./catalog.js":[87,87],"./catalog/page.js":[762,762],"./mainPage.js":[429,429],"./order.js":[880,880],"./orderDone.js":[879,879],"./product/page.js":[30,30]};function o(t){if(!r.o(n,t))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}));var e=n[t],o=e[0];return r.e(e[1]).then((()=>r(o)))}o.keys=()=>Object.keys(n),o.id=277,t.exports=o}},n={};function o(t){if(n[t])return n[t].exports;var e=n[t]={exports:{}};return r[t](e,e.exports,o),e.exports}o.m=r,o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.f={},o.e=t=>Promise.all(Object.keys(o.f).reduce(((e,r)=>(o.f[r](t,e),e)),[])),o.u=t=>t+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="my-pizza-website-tested:",o.l=(r,n,a)=>{if(t[r])t[r].push(n);else{var i,s;if(void 0!==a)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==e+a){i=u;break}}i||(s=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,o.nc&&i.setAttribute("nonce",o.nc),i.setAttribute("data-webpack",e+a),i.src=r),t[r]=[n];var h=(e,n)=>{i.onerror=i.onload=null,clearTimeout(d);var o=t[r];if(delete t[r],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((t=>t(n))),e)return e(n)},d=setTimeout(h.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=h.bind(null,i.onerror),i.onload=h.bind(null,i.onload),s&&document.head.appendChild(i)}},o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;o.g.importScripts&&(t=o.g.location+"");var e=o.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=t})(),(()=>{var t={179:0};o.f.j=(e,r)=>{var n=o.o(t,e)?t[e]:void 0;if(0!==n)if(n)r.push(n[2]);else{var a=new Promise(((r,o)=>{n=t[e]=[r,o]}));r.push(n[2]=a);var i=o.p+o.u(e),s=new Error;o.l(i,(r=>{if(o.o(t,e)&&(0!==(n=t[e])&&(t[e]=void 0),n)){var a=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.src;s.message="Loading chunk "+e+" failed.\n("+a+": "+i+")",s.name="ChunkLoadError",s.type=a,s.request=i,n[1](s)}}),"chunk-"+e)}};var e=(e,r)=>{for(var n,a,[i,s,c]=r,l=0,u=[];l<i.length;l++)a=i[l],o.o(t,a)&&t[a]&&u.push(t[a][0]),t[a]=0;for(n in s)o.o(s,n)&&(o.m[n]=s[n]);for(c&&c(o),e&&e(r);u.length;)u.shift()()},r=self.webpackChunkmy_pizza_website_tested=self.webpackChunkmy_pizza_website_tested||[];r.forEach(e.bind(null,0)),r.push=e.bind(null,r.push.bind(r))})(),(()=>{"use strict";o(666),document.addEventListener("click",(r=>{switch(r.target.className.split(" ")[0]){case"closebt":case"closebtn":document.getElementById("myNav").style.width="0%";break;case"openbtn":document.getElementById("myNav").style.width="100%";break;case"cartbtn":a(r.target.id);break;case"removebtn":i(r.target.id);break;case"hashbtn":o=r.target.id,t.changeURL(o),l();break;case"showbtn":(async()=>{const t=document.getElementById("dropdown");if(t.classList.contains("show"))t.classList.remove("show");else{t.classList.add("show");const r=await e.getData("db");n.visualize(r,t)}})();break;case"submitformbtn":s()}var o}));const t=new class{getHash(){return window.location.hash.split("#")[1]}changeURL(t){history.pushState({},null,`#${t}`)}replace(t){history.replaceState({},null,`#${t}`)}goBack(){history.back()}getShit(t){return(e="")=>({catalog:{viewName:e?"catalog/page":"catalog",endpointName:"db"},order:{viewName:"order",endpointName:"db"},action:{viewName:e?"action/page":"mainPage",endpointName:"db"},product:{viewName:e?"product/page":"mainPage",endpointName:"db"}}[t]||{viewName:"mainPage",endpointName:"db"})}getState(){if(!this.getHash())return{viewName:"mainPage",endpointName:"db"};if(this.getHash().includes("/")){const t=this.getHash().split("/");return this.getShit(t[0])(t[1])}return this.getShit(this.getHash())()}},e=new class{getData(t){return fetch(`https://my-json-server.typicode.com/gazinaft/pizza_db/${t}`).then((t=>t.json())).catch((t=>console.log(t)))}post(t,e){return fetch(`https://my-json-server.typicode.com/gazinaft/pizza_db/${e}`,{method:"POST",body:JSON.stringify(t)}).then((t=>t.json())).catch((t=>console.log(t)))}},r=new class{render(t){document.getElementById("main").innerHTML=t}loader(){document.getElementById("main").innerHTML='\n    <div class="text-center">\n      <div class="spinner-border text-primary" role="status" style="width: 5rem; height: 5rem;">\n        <span class="sr-only">Loading...</span>\n      </div>\n    </div>\n    '}},n=new class{constructor(){void 0===localStorage.getItem("cart")&&localStorage.setItem("cart","{}")}add(t){const e=JSON.parse(localStorage.getItem("cart"));void 0===e[t]?e[t]=1:++e[t],localStorage.setItem("cart",JSON.stringify(e))}getItems(){return JSON.parse(localStorage.getItem("cart"))}delete(t){const e=JSON.parse(localStorage.getItem("cart"));e[t]&&(--e[t],0===e[t]&&delete e[t],localStorage.setItem("cart",JSON.stringify(e)))}isEmpty(){const t=JSON.parse(localStorage.getItem("cart"));return 0===Object.keys(t).length}clear(){localStorage.setItem("cart","{}")}getPrice(t){const e=this.getItems();let r=0;for(const n in e)r+=t.find((t=>t.id===n)).price*e[n];return r}visualize(t,e){const r=this.getItems(),n=t.products.filter((t=>Object.keys(r).includes(t.id)));e.innerHTML=`<div class="list-group">\n${n.map((t=>`<a class="list-group-item list-group-item-action flex-column align-items-start">\n        <div class="d-flex w-100 justify-content-between">\n          <h5 class="mb-1">${t.productName}</h5>\n        </div>\n        <p class="mb-1">${r[t.id]} for ${t.price} each</p>\n        <hr>\n        <button class="cartbtn btn btn-outline-primary" id="${t.id}" style="float: left">Add</button>\n        <button class="removebtn btn btn-outline-primary" id="${t.id}">Remove</button>   \n      </a>`)).join("\n")}\n        <h3>Total: ${this.getPrice(t.products)}</h3>\n    </div>`}},a=t=>{n.add(t)},i=t=>{n.delete(t)},s=async()=>{const a=document.getElementById("email"),i=document.getElementById("phone"),s=document.getElementById("name"),c=document.getElementById("address"),u=document.getElementById("time"),h=document.getElementById("cash");r.loader();let d=await e.getData("db");console.log(d),console.log(n.getItems());const p={email:a.value,phone:i.value,name:s.value,address:c.value,time:u.value,payment:h.checked?"cash":"card",order:n.getItems(),price:n.getPrice(d.products)};n.clear();const g=(await e.post(p,"orders")).id,f=(await o.e(879).then(o.bind(o,879))).default;window.removeEventListener("hashchange",l),t.changeURL(`order${g}`),r.render(f(p,d.products)),window.addEventListener("hashchange",l)};let c;const l=()=>{const{viewName:n,endpointName:a}=t.getState();r.loader(),o(277)(`./${n}.js`).then((t=>(c=t.default,e.getData(a)))).catch((t=>{console.log(t),async function(){const t=await o.e(429).then(o.bind(o,429)).catch((t=>console.log(t))),n=await e.getData("db").catch((t=>console.log(t)));r.render(t(n))}()})).then((e=>{r.render(c(e,t.getHash()))})).catch((t=>{console.log(t)}))};l(),window.addEventListener("hashchange",l),window.addEventListener("hashchange",(()=>{n.isEmpty()&&"order"===t.getHash()&&t.goBack()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,