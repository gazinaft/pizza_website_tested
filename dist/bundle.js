(()=>{var e,t,a={277:(e,t,a)=>{var n={"./__tests__/action/page.test.js":[369,369],"./__tests__/catalog.test.js":[716,716],"./__tests__/catalog/page.test.js":[368,368],"./__tests__/mainPage.test.js":[480,480],"./__tests__/order.test.js":[806,806],"./__tests__/orderDone.test.js":[624,624],"./__tests__/product/page.test.js":[329,329],"./action/page.js":[722,722],"./catalog.js":[87,87],"./catalog/page.js":[762,762],"./mainPage.js":[429,429],"./order.js":[880,880],"./orderDone.js":[879,879],"./product/page.js":[30,30]};function r(e){if(!a.o(n,e))return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=n[e],r=t[0];return a.e(t[1]).then((()=>a(r)))}r.keys=()=>Object.keys(n),r.id=277,e.exports=r}},n={};function r(e){if(n[e])return n[e].exports;var t=n[e]={exports:{}};return a[e](t,t.exports,r),t.exports}r.m=a,r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,a)=>(r.f[a](e,t),t)),[])),r.u=e=>e+".bundle.js",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="my-pizza-website-tested:",r.l=(a,n,s)=>{if(e[a])e[a].push(n);else{var o,i;if(void 0!==s)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var l=c[d];if(l.getAttribute("src")==a||l.getAttribute("data-webpack")==t+s){o=l;break}}o||(i=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,r.nc&&o.setAttribute("nonce",r.nc),o.setAttribute("data-webpack",t+s),o.src=a),e[a]=[n];var g=(t,n)=>{o.onerror=o.onload=null,clearTimeout(m);var r=e[a];if(delete e[a],o.parentNode&&o.parentNode.removeChild(o),r&&r.forEach((e=>e(n))),t)return t(n)},m=setTimeout(g.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=g.bind(null,o.onerror),o.onload=g.bind(null,o.onload),i&&document.head.appendChild(o)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e={179:0};r.f.j=(t,a)=>{var n=r.o(e,t)?e[t]:void 0;if(0!==n)if(n)a.push(n[2]);else{var s=new Promise(((a,r)=>{n=e[t]=[a,r]}));a.push(n[2]=s);var o=r.p+r.u(t),i=new Error;r.l(o,(a=>{if(r.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var s=a&&("load"===a.type?"missing":a.type),o=a&&a.target&&a.target.src;i.message="Loading chunk "+t+" failed.\n("+s+": "+o+")",i.name="ChunkLoadError",i.type=s,i.request=o,n[1](i)}}),"chunk-"+t)}};var t=(t,a)=>{for(var n,s,[o,i,c]=a,d=0,l=[];d<o.length;d++)s=o[d],r.o(e,s)&&e[s]&&l.push(e[s][0]),e[s]=0;for(n in i)r.o(i,n)&&(r.m[n]=i[n]);for(c&&c(r),t&&t(a);l.length;)l.shift()()},a=self.webpackChunkmy_pizza_website_tested=self.webpackChunkmy_pizza_website_tested||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})(),(()=>{"use strict";document.addEventListener("click",(a=>{switch(a.target.className.split(" ")[0]){case"closebt":case"closebtn":document.getElementById("myNav").style.width="0%";break;case"openbtn":document.getElementById("myNav").style.width="100%";break;case"cartbtn":s(a.target.id);break;case"removebtn":o(a.target.id);break;case"hashbtn":r=a.target.id,e.changeURL(r),d();break;case"showbtn":(async()=>{const e=document.getElementById("dropdown");if(e.classList.contains("show"))e.classList.remove("show");else{e.classList.add("show");const a=await t.getData("db");n.visualize(a,e)}})();break;case"submitformbtn":i()}var r}));const e=new class{getHash(){return window.location.hash.split("#")[1]}changeURL(e){history.pushState({},null,`#${e}`)}replace(e){history.replaceState({},null,`#${e}`)}goBack(){history.back()}getShit(e){return(t="")=>({catalog:{viewName:t?"catalog/page":"catalog",endpointName:"db"},order:{viewName:"order",endpointName:"db"},action:{viewName:t?"action/page":"mainPage",endpointName:"db"},product:{viewName:t?"product/page":"mainPage",endpointName:"db"}}[e]||{viewName:"mainPage",endpointName:"db"})}getState(){if(!this.getHash())return{viewName:"mainPage",endpointName:"db"};if(this.getHash().includes("/")){const e=this.getHash().split("/");return this.getShit(e[0])(e[1])}return this.getShit(this.getHash())()}},t=new class{getData(e){return fetch(`https://my-json-server.typicode.com/gazinaft/pizza_db/${e}`).then((e=>e.json())).catch((e=>console.log(e)))}post(e,t){return fetch(`https://my-json-server.typicode.com/gazinaft/pizza_db/${t}`,{method:"POST",body:JSON.stringify(e)}).then((e=>e.json())).catch((e=>console.log(e)))}},a=new class{render(e){document.getElementById("main").innerHTML=e}loader(){document.getElementById("main").innerHTML='\n    <div class="text-center">\n      <div class="spinner-border text-primary" role="status" style="width: 5rem; height: 5rem;">\n        <span class="sr-only">Loading...</span>\n      </div>\n    </div>\n    '}},n=new class{constructor(){void 0===localStorage.getItem("cart")&&localStorage.setItem("cart","{}")}add(e){const t=JSON.parse(localStorage.getItem("cart"));void 0===t[e]?t[e]=1:++t[e],localStorage.setItem("cart",JSON.stringify(t))}getItems(){return JSON.parse(localStorage.getItem("cart"))}delete(e){const t=JSON.parse(localStorage.getItem("cart"));t[e]&&(--t[e],0===t[e]&&delete t[e],localStorage.setItem("cart",JSON.stringify(t)))}isEmpty(){const e=JSON.parse(localStorage.getItem("cart"));return 0===Object.keys(e).length}clear(){localStorage.setItem("cart","{}")}getPrice(e){const t=this.getItems();let a=0;for(const n in t)a+=e.find((e=>e.id===n)).price*t[n];return a}visualize(e,t){const a=this.getItems(),n=e.products.filter((e=>Object.keys(a).includes(e.id)));t.innerHTML=`<div class="list-group">\n${n.map((e=>`<a class="list-group-item list-group-item-action flex-column align-items-start">\n        <div class="d-flex w-100 justify-content-between">\n          <h5 class="mb-1">${e.productName}</h5>\n        </div>\n        <p class="mb-1">${a[e.id]} for ${e.price} each</p>\n        <hr>\n        <button class="cartbtn btn btn-outline-primary" id="${e.id}" style="float: left">Add</button>\n        <button class="removebtn btn btn-outline-primary" id="${e.id}">Remove</button>   \n      </a>`)).join("\n")}\n        <h3>Total: ${this.getPrice(e.products)}</h3>\n    </div>`}},s=e=>{n.add(e)},o=e=>{n.delete(e)},i=async()=>{const s=document.getElementById("email"),o=document.getElementById("phone"),i=document.getElementById("name"),c=document.getElementById("address"),l=document.getElementById("time"),g=document.getElementById("cash");a.loader();let m=await t.getData("db");console.log(m),console.log(n.getItems());const u={email:s.value,phone:o.value,name:i.value,address:c.value,time:l.value,payment:g.checked?"cash":"card",order:n.getItems(),price:n.getPrice(m.products)};n.clear();const h=(await t.post(u,"orders")).id,p=(await r.e(879).then(r.bind(r,879))).default;window.removeEventListener("hashchange",d),e.changeURL(`order${h}`),a.render(p(u,m.products)),window.addEventListener("hashchange",d)};let c;const d=()=>{const{viewName:n,endpointName:s}=e.getState();a.loader(),r(277)(`./${n}.js`).then((e=>(c=e.default,t.getData(s)))).catch((e=>{console.log(e),async function(){const e=await r.e(429).then(r.bind(r,429)).catch((e=>console.log(e))),n=await t.getData("db").catch((e=>console.log(e)));a.render(e(n))}()})).then((t=>{a.render(c(t,e.getHash()))})).catch((e=>{console.log(e)}))};d(),window.addEventListener("hashchange",d),window.addEventListener("hashchange",(()=>{n.isEmpty()&&"order"===e.getHash()&&e.goBack()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,