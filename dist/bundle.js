(()=>{var e,t,a={277:(e,t,a)=>{var n={"./__tests__/action/page.test.js":[369,369],"./__tests__/catalog.test.js":[716,716],"./__tests__/catalog/page.test.js":[368,368],"./__tests__/mainPage.test.js":[480,480],"./__tests__/order.test.js":[806,806],"./__tests__/orderDone.test.js":[624,624],"./__tests__/product/page.test.js":[329,329],"./action/page.js":[722,722],"./catalog.js":[87,87],"./catalog/page.js":[762,762],"./mainPage.js":[429,429],"./order.js":[880,880],"./orderDone.js":[879,879],"./product/page.js":[30,30]};function r(e){if(!a.o(n,e))return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=n[e],r=t[0];return a.e(t[1]).then((()=>a(r)))}r.keys=()=>Object.keys(n),r.id=277,e.exports=r}},n={};function r(e){if(n[e])return n[e].exports;var t=n[e]={exports:{}};return a[e](t,t.exports,r),t.exports}r.m=a,r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,a)=>(r.f[a](e,t),t)),[])),r.u=e=>e+".bundle.js",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="my-pizza-website-tested:",r.l=(a,n,o)=>{if(e[a])e[a].push(n);else{var s,i;if(void 0!==o)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var l=c[d];if(l.getAttribute("src")==a||l.getAttribute("data-webpack")==t+o){s=l;break}}s||(i=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.setAttribute("data-webpack",t+o),s.src=a),e[a]=[n];var g=(t,n)=>{s.onerror=s.onload=null,clearTimeout(m);var r=e[a];if(delete e[a],s.parentNode&&s.parentNode.removeChild(s),r&&r.forEach((e=>e(n))),t)return t(n)},m=setTimeout(g.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=g.bind(null,s.onerror),s.onload=g.bind(null,s.onload),i&&document.head.appendChild(s)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e={179:0};r.f.j=(t,a)=>{var n=r.o(e,t)?e[t]:void 0;if(0!==n)if(n)a.push(n[2]);else{var o=new Promise(((a,r)=>{n=e[t]=[a,r]}));a.push(n[2]=o);var s=r.p+r.u(t),i=new Error;r.l(s,(a=>{if(r.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var o=a&&("load"===a.type?"missing":a.type),s=a&&a.target&&a.target.src;i.message="Loading chunk "+t+" failed.\n("+o+": "+s+")",i.name="ChunkLoadError",i.type=o,i.request=s,n[1](i)}}),"chunk-"+t)}};var t=(t,a)=>{for(var n,o,[s,i,c]=a,d=0,l=[];d<s.length;d++)o=s[d],r.o(e,o)&&e[o]&&l.push(e[o][0]),e[o]=0;for(n in i)r.o(i,n)&&(r.m[n]=i[n]);for(c&&c(r),t&&t(a);l.length;)l.shift()()},a=self.webpackChunkmy_pizza_website_tested=self.webpackChunkmy_pizza_website_tested||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})(),(()=>{"use strict";document.addEventListener("click",(a=>{switch(a.target.className.split(" ")[0]){case"closebt":case"closebtn":document.getElementById("myNav").style.width="0%";break;case"openbtn":document.getElementById("myNav").style.width="100%";break;case"cartbtn":o(a.target.id);break;case"removebtn":s(a.target.id);break;case"hashbtn":r=a.target.id,e.changeURL(r),d();break;case"showbtn":(()=>{const e=document.getElementById("dropdown");e.classList.contains("show")?e.classList.remove("show"):(e.classList.add("show"),t.getData("db").then((t=>{n.visualize(t,e)})))})();break;case"submitformbtn":i()}var r}));const e=new class{getHash(){return window.location.hash.split("#")[1]}changeURL(e){history.pushState({},null,`#${e}`)}replace(e){history.replaceState({},null,`#${e}`)}goBack(){history.back()}getShit(e){return(t="")=>({catalog:{viewName:t?"catalog/page":"catalog",endpointName:"db"},order:{viewName:"order",endpointName:"db"},action:{viewName:t?"action/page":"mainPage",endpointName:"db"},product:{viewName:t?"product/page":"mainPage",endpointName:"db"}}[e]||{viewName:"mainPage",endpointName:"db"})}getState(){if(!this.getHash())return{viewName:"mainPage",endpointName:"db"};if(this.getHash().includes("/")){const e=this.getHash().split("/");return this.getShit(e[0])(e[1])}return this.getShit(this.getHash())()}},t=new class{getData(e){return fetch(`https://my-json-server.typicode.com/gazinaft/pizza_db/${e}`).then((e=>e.json())).catch((e=>console.log(e)))}post(e,t){return fetch(`https://my-json-server.typicode.com/gazinaft/pizza_db/${t}`,{method:"POST",body:JSON.stringify(e)}).then((e=>e.json())).catch((e=>console.log(e)))}},a=new class{render(e){document.getElementById("main").innerHTML=e}loader(){document.getElementById("main").innerHTML='\n    <div class="text-center">\n      <div class="spinner-border text-primary" role="status" style="width: 5rem; height: 5rem;">\n        <span class="sr-only">Loading...</span>\n      </div>\n    </div>\n    '}},n=new class{constructor(){void 0===localStorage.getItem("cart")&&localStorage.setItem("cart","{}")}add(e){const t=JSON.parse(localStorage.getItem("cart"));void 0===t[e]?t[e]=1:++t[e],localStorage.setItem("cart",JSON.stringify(t))}getItems(){return JSON.parse(localStorage.getItem("cart"))}delete(e){const t=JSON.parse(localStorage.getItem("cart"));t[e]&&(--t[e],0===t[e]&&delete t[e],localStorage.setItem("cart",JSON.stringify(t)))}isEmpty(){const e=JSON.parse(localStorage.getItem("cart"));return 0===Object.keys(e).length}clear(){localStorage.setItem("cart","{}")}getPrice(e){const t=this.getItems();let a=0;for(const n in t)a+=e.find((e=>e.id===n)).price*t[n];return a}visualize(e,t){const a=this.getItems(),n=e.products.filter((e=>Object.keys(a).includes(e.id)));t.innerHTML=`<div class="list-group">\n${n.map((e=>`<a class="list-group-item list-group-item-action flex-column align-items-start">\n        <div class="d-flex w-100 justify-content-between">\n          <h5 class="mb-1">${e.productName}</h5>\n        </div>\n        <p class="mb-1">${a[e.id]} for ${e.price} each</p>\n        <hr>\n        <button class="cartbtn btn btn-outline-primary" id="${e.id}" style="float: left">Add</button>\n        <button class="removebtn btn btn-outline-primary" id="${e.id}">Remove</button>   \n      </a>`)).join("\n")}\n        <h3>Total: ${this.getPrice(e.products)}</h3>\n    </div>`}},o=e=>{n.add(e)},s=e=>{n.delete(e)},i=()=>{const o=document.getElementById("email"),s=document.getElementById("phone"),i=document.getElementById("name"),c=document.getElementById("address"),l=document.getElementById("time"),g=document.getElementById("cash");a.loader();let m=t.getData("db");console.log(m),console.log(n.getItems());const u={email:o.value,phone:s.value,name:i.value,address:c.value,time:l.value,payment:g.checked?"cash":"card",order:n.getItems(),price:n.getPrice(m.products)};n.clear();const h=t.post(u,"orders").id,p=r.e(879).then(r.bind(r,879)).default;window.removeEventListener("hashchange",d),e.changeURL(`order${h}`),a.render(p(u,m.products)),window.addEventListener("hashchange",d)};let c;const d=()=>{const{viewName:n,endpointName:o}=e.getState();a.loader(),r(277)(`./${n}.js`).then((e=>(c=e.default,t.getData(o)))).catch((e=>{console.log(e),async function(){const e=await r.e(429).then(r.bind(r,429)).catch((e=>console.log(e))),n=await t.getData("db").catch((e=>console.log(e)));a.render(e(n))}()})).then((t=>{a.render(c(t,e.getHash()))})).catch((e=>{console.log(e)}))};d(),window.addEventListener("hashchange",d),window.addEventListener("hashchange",(()=>{n.isEmpty()&&"order"===e.getHash()&&e.goBack()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,